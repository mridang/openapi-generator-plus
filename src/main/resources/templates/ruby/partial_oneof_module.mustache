{{#description}}
# {{{.}}}
{{/description}}
module {{classname}}
  class << self
    {{#oneOf}}
    {{#-first}}
    # List of class defined in oneOf (OpenAPI v3)
    def openapi_one_of
      [
    {{/-first}}
        :'{{{.}}}'{{^-last}},{{/-last}}
    {{#-last}}
      ]
    end

    {{/-last}}
    {{/oneOf}}
    {{#discriminator}}
    {{#propertyName}}
    # Discriminator's property name (OpenAPI v3)
    def openapi_discriminator_name
      :'{{{.}}}'
    end

    {{/propertyName}}
    {{#mappedModels}}
    {{#-first}}
    # Discriminator's mapping (OpenAPI v3)
    def openapi_discriminator_mapping
      {
    {{/-first}}
        :'{{{mappingName}}}' => :'{{{modelName}}}'{{^-last}},{{/-last}}
    {{#-last}}
      }
    end

    {{/-last}}
    {{/mappedModels}}
    {{/discriminator}}
    # Builds the object
    # @param [Mixed] Data to be matched against the list of oneOf items
    # @return [Object] Returns the model or the data itself
    def build(data)
    {{#discriminator}}
      discriminator_value = data[openapi_discriminator_name]
      return nil if discriminator_value.nil?
    {{#mappedModels}}
    {{#-first}}

      klass_name = openapi_discriminator_mapping[discriminator_value.to_s.to_sym]
      return nil unless klass_name

      # MODIFIED: Ensure model is looked up in the Models namespace
      {{moduleName}}::Models.const_get(klass_name).build_from_hash(data)
    {{/-first}}
    {{/mappedModels}}
    {{^mappedModels}}
      # MODIFIED: Ensure model is looked up in the Models namespace
      {{moduleName}}::Models.const_get(discriminator_value).build_from_hash(data)
    {{/mappedModels}}
    {{/discriminator}}
    {{^discriminator}}
      # Go through the list of oneOf items and attempt to identify the appropriate one.
      # Note:
      # - We do not attempt to check whether exactly one item matches.
      # - No advanced validation of types in some cases (e.g. "x: { type: string }" will happily match { x: 123 })
      #   due to the way the deserialization is made in the base_object template (it just casts without verifying).
      # - TODO: scalar values are de facto behaving as if they were nullable.
      # - TODO: logging when debugging is set.
      openapi_one_of.each do |klass_name|
        begin
          next if klass_name == :AnyType # "nullable: true"
          typed_data = find_and_cast_into_type(klass_name, data)
          return typed_data if typed_data
        rescue # rescue all errors so we keep iterating even if the current item lookup raises
        end
      end

      openapi_one_of.include?(:AnyType) ? data : nil
    {{/discriminator}}
    end
    {{^discriminator}}

    private

    SchemaMismatchError = Class.new(StandardError)

    # Note: 'File' is missing here because in the regular case we get the data _after_ a call to JSON.parse.
    def find_and_cast_into_type(klass_name, data)
      return if data.nil?

      case klass_name.to_s
      when 'Boolean'
        return data if data.instance_of?(TrueClass) || data.instance_of?(FalseClass)
      when 'Float'
        return data if data.instance_of?(Float)
      when 'Integer'
        return data if data.instance_of?(Integer)
      when 'Time'
        return Time.parse(data)
      when 'Date'
        return Date.parse(data)
      when 'String'
        return data if data.instance_of?(String)
      when 'Object' # "type: object"
        return data if data.instance_of?(Hash)
      when /\AArray<(?<sub_type>.+)>\z/ # "type: array"
        if data.instance_of?(Array)
          sub_type = Regexp.last_match[:sub_type]
          return data.map { |item| find_and_cast_into_type(sub_type.to_sym, item) } # MODIFIED: ensure sub_type is symbol for recursive call
        end
      when /\AHash<String, (?<sub_type>.+)>\z/ # "type: object" with "additionalProperties: { ... }"
        if data.instance_of?(Hash) && data.keys.all? { |k| k.instance_of?(Symbol) || k.instance_of?(String) }
          sub_type = Regexp.last_match[:sub_type]
          return data.each_with_object({}) { |(k, v), hsh| hsh[k] = find_and_cast_into_type(sub_type.to_sym, v) } # MODIFIED: ensure sub_type is symbol for recursive call
        end
      else # model
        # MODIFIED: Ensure model is looked up in the Models namespace
        const = {{moduleName}}::Models.const_get(klass_name)
        if const
          if const.respond_to?(:openapi_one_of) # nested oneOf model
            model = const.build(data)
            return model if model
          else
            # raise if data contains keys that are not known to the model
            # TODO: Consider re-enabling this check if strictly needed, but it might be too restrictive for oneOf.
            # raise if const.respond_to?(:acceptable_attributes) && data.is_a?(Hash) && !(data.keys.map(&:to_sym) - const.acceptable_attributes).empty?
            model = const.build_from_hash(data)
            return model if model
          end
        end
      end

      raise # if no match by now, raise
    rescue SchemaMismatchError => e # Specific rescue for re-raising
      raise e
    rescue # General rescue for other errors during casting/lookup
      # MODIFIED: Updated class name in error message to include full namespace context
      raise SchemaMismatchError, "#{data.inspect} doesn't match the {{moduleName}}::Models::#{klass_name} type"
    end
    {{/discriminator}}
  end
end
